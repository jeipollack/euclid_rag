[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "euclid_rag"
description = "Euclid RAG LLM Application"
license = {file = "LICENSE"}
readme= "README.md"
keywords = [
    "euclid",
]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPL-3.0)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.12"
dependencies = [
    # Core utilities
    "requests==2.32.4",
    "python-dotenv==1.1.0",
    "pyyaml==6.0.2",
    "numpy>=1.26.2,<2.0.0",
    "types-requests",


    # Machine Learning / NLP
    "torch==2.6.0",
    "transformers==4.49.0",
    "scikit-learn==1.7.0",
    "sentence-transformers==3.3.1",

    # OCR and PDF/image tools
    "pytesseract==0.3.13",
    "pillow==11.1.0",
    "reportlab==4.3.1",
    "svglib==1.5.1",

    # Streamlit frontend
    "streamlit==1.43.0",

    # LangChain and integrations
    "langchain==0.3.25",
    "langchain-core==0.3.64",
    "langchain-community==0.3.24",
    "langchain-openai==0.3.7",
    "langchain-ollama==0.3.3",
    "langchain-weaviate==0.0.4",

    # Embeddings / vector DBs
    "tiktoken==0.9.0",
    "faiss-cpu==1.9.0.post1",
    "weaviate-client==4.11.1",
    "pinecone==6.0.1",

    # Scientific document tools
    "bibtexparser==1.4.3",

    # Atlassian integration
    "atlassian-python-api==3.41.19"
]

dynamic = ["version"]

[project.optional-dependencies]
dev = [
    # Testing
    "coverage[toml]",
    "pytest",
    "pytest-asyncio",
    "mypy",
    # Documentation
    "documenteer[guide]<2",
    "scriv",
]

[project.urls]
Source = "https://github.com/jeipollack/euclid_rag"

[build-system]
requires = [
    "setuptools>=61",
    "wheel",
    "setuptools_scm[toml]>=6.2"
]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.setuptools.packages.find]
# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
where = ["python"]
include = ["euclid"]

[tool.black]
line-length = 79
target-version = ["py312"]

[tool.coverage.run]
parallel = true
branch = true
source = ["euclid"]

[tool.coverage.paths]
source = ["python", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "yaml"
ignore_missing_imports = true

# Uncomment and add the "pydantic.mypy" plugin if using Pydantic. Add the
# "sqlalchemy.ext.mypy.plugin" if using SQL Alchemy.
# plugins = []

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

# Use the generic Ruff configuration in ruff.toml and extend it with only
# project-specific settings. Add a [tool.ruff.lint.extend-per-file-ignores]
# section for project-specific ignore rules.
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.isort]
known-first-party = ["euclid.rag", "tests"]
split-on-trailing-comma = false

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"
